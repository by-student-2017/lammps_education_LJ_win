# Sample LAMMPS input script for thermal conductivity of liquid water

units       real
variable    T equal 320
variable    V equal vol
variable    dt equal 1.75
variable    p equal 100     # correlation length
variable    s equal 10 
variable    d equal $p*$s   # dump interval

# convert from LAMMPS real units to SI

variable    kB equal 1.3806504e-23    # [J/K/** Boltzmann
variable    kCal2J equal 4186.0/6.02214e23
variable    A2m equal 1.0e-10
variable    fs2s equal 1.0e-15
variable    convert equal ${kCal2J}*${kCal2J}/${fs2s}/${A2m}


# setup problem

dimension    3
boundary     p p p
lattice      fcc 5.376 orient x 1 0 0 orient y 0 1 0 orient z 0 0 1
region       box block 0 4 0 4 0 4
create_box   1 box
create_atoms 1 box
mass         1 18.01528
pair_style   lj/cut 9.0
pair_coeff   * * 0.650 3.166
thermo       $d
#Compute and print thermodynamic info (e.g. temperature, energy, pressure) on d timesteps and at the beginning and end of a simulation
# equilibration and thermalization

velocity     all create $T 102486 mom yes rot yes dist gaussian
fix          NVT all nvt temp $T $T 10 drag 0.2
#These commands perform time integration on Nose-Hoover style non-Hamiltonian equations of motion which are designed to 
generate positions and velocities sampled from the canonical (nvt), isothermal-isobaric (npt), and isenthalpic (nph)
ensembles. This updates the position and velocity for atoms in the group each timestep.

#In some cases (e.g. for solids) the pressure (volume) and/or temperature of the system can oscillate undesirably when a Nose/Hoover barostat and thermostat is applied. The optional drag keyword will damp these oscillations, although it alters the Nose/Hoover equations. A value of 0.0 (no drag) leaves the Nose/Hoover formalism unchanged. A non-zero value adds a drag term; the larger the value specified, the greater the damping effect. Performing a short run and monitoring the pressure and temperature is the best way to determine if the drag term is working. Typically a value between 0.2 to 2.0 is sufficient to damp oscillations after a few periods.

reset_timestep 0

#Resetting the timestep clears flags for computes that may have calculated some quantity from a previous run. This means these quantity cannot be accessed by a variable in between runs until a new run is performed.

compute      myKE all ke/atom

#Define a computation that calculates the per-atom translational kinetic energy for each atom in a group.
The kinetic energy is simply 1/2 m v^2, where m is the mass and v is the velocity of each atom.

compute      myPE all pe/atom

#Define a computation that computes the per-atom potential energy for each atom in a group

compute      myStress all stress/atom NULL virial

#Define a computation that computes per-atom stress tensor for each atom in a group. In case of compute stress/atom, the tensor for each atom is symmetric with 6 components and is stored as a 6-element vector in the following order: xx, yy, zz, xy, xz, yz.

compute      flux all heat/flux myKE myPE myStress

#The compute takes three arguments which are IDs of other computes. One calculates per-atom kinetic energy (ke-ID), one calculates per-atom potential energy (pe-ID), and the third calculates per-atom stress (stress-ID).

#This compute calculates 6 quantities and stores them in a 6-component vector. The first 3 components are the x, y, z components of the full heat flux vector, i.e. (Jx, Jy, Jz). The next 3 components are the x, y, z components of just the convective portion of the flux.


variable     Jx equal c_flux[1]/vol
variable     Jy equal c_flux[2]/vol
variable     Jz equal c_flux[3]/vol
fix          JJ all ave/correlate $s $p $d &
             c_flux[1] c_flux[2] c_flux[3] type auto file J0Jt.dat ave running


#As a post-processing operation, an auto-correlation can be performed, its integral estimated, and the Green-Kubo formula above evaluated.The fix ave/correlate command can calculate the auto-correlation.The Green-Kubo method is realized by the "compute heat/flux" and "fix ave/correlate" commands.The Green-Kubo formalism allows us to calculate many dynamical properties such as viscosity, thermal conductivity and electrical conductivity from equilibrium simulations of atomic systems.


variable     scale equal ${convert}/${kB}/$T/$T/$V*$s*${dt}
variable     k11 equal trap(f_JJ[3])*${scale}
variable     k22 equal trap(f_JJ[4])*${scale}
variable     k33 equal trap(f_JJ[5])*${scale}

#The trap() function in the variable command can calculate the integral.


thermo_style custom step temp v_Jx v_Jy v_Jz v_k11 v_k22 v_k33

#The heat flux can be output every so many timesteps  via the thermo_style custom command
dump coord all custom 1 tcliquidwatersimple.dump id type x y z
run          100000
variable     k equal (v_k11+v_k22+v_k33)/3.0
variable     ndens equal count(all)/vol
print        "average conductivity: $k[W/mK] @ $T K, ${ndens} /A^3"