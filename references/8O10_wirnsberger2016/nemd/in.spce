###############################################################################
#
#
#  This file is part of the supplementary (open access) data for the paper
# 
#  P. Wirnsberger, D. Fijan, A. Šarić, M. Neumann, C. Dellago and D. Frenkel, 
#  "Non-equilibrium simulations of thermally induced electric fields in water", 
#  J. Chem. Phys. (2016).
#
#  The paper is also available on arXiv: http://arxiv.org/pdf/1602.02734.pdf.
#
#
#  Description: 
#  ------------
# 
#  This file is a LAMMPS input script for carrying out a NEMD simulation of
#  SPC/E water using the eHEX/a algorithm. 
#
#  LAMMPS will create the following 4 files:
#
#       ->  T.dat	contains the time-averaged, spatial temperature profile.
#       ->  Rho.dat	contains the time-averaged, spatial oxygen number density profile.
#       ->  log.lammps	contains log data and meta information.
#	->  trj.dat     contains the entire NEMD trajectory for further processing, for example,
#                       to calculate multipole moments, the potential or the field.
#
#  Dependencies:
#  -------------
#
#  Make sure that the equilibrated input file data.ness_ewald (or data.ness_wolf) 
#  is located in the same directory.
#
#  LAMMPS version:
#  ---------------
#
#  This script was tested successfully with a modified version of 
#  LAMMPS 9Dec14.
#  (See the folder and README file in the root directory for more information.)
#
#
###############################################################################



# specification of units, spatial dimensions, boundary conditions and atom-style
 units        		real
 dimension   		3
 boundary     		p p p
 atom_style   		full

# read equilibrated (steady-state) configuration from file
# NOTE: change the input file if you want to use the Wolf method
 read_data              "data.ness_ewald"
# read_data              "data.ness_wolf"


# group atoms 
 group    		O     type 2
 group    		H     type 1

# energy flux into (out of) the reservoir
 variable dQdt         	equal 0.1614

# timestep              
 variable dt             equal 2.0  

# simulation time and number of timesteps for the production run
 variable tprod      	equal 60000000
 variable Nprod      	equal floor(${tprod}/${dt})

# parameters for the SPC/E model
 variable epsOO       	equal 0.15535
 variable sigOO       	equal 3.166
 variable theta       	equal 109.47

# long-range and short-range cutoffs
 variable L           equal (xhi-xlo)
 variable cutC        equal ${L}/2.

# NOTE: use different parameters for the Wolf method
# variable zeta        equal 7.2/${L}
# variable cutC        equal 11

 variable cutLJ       equal 11

#################################################
# Interactions
#################################################

# define the pair style with long-range Coulomb interactions and short-range LJ interactions

# use Ewald summation with a k-space precision of 1.e-5
 pair_style        	lj/cut/coul/long ${cutLJ} ${cutC}
 pair_coeff        	2 2 ${epsOO} ${sigOO}
 pair_coeff        	1 2 0 0
 pair_coeff        	1 1 0 0
 kspace_style      	ewald 1.e-5

# NOTE: for the Wolf method use the following settings instead:
# pair_style      hybrid/overlay lj/cut ${cutLJ} coul/wolf ${zeta} ${cutC}
# pair_coeff      2 2 lj/cut ${epsOO} ${sigOO}
# pair_coeff      1 2 lj/cut 0 0
# pair_coeff      1 1 lj/cut 0 0
# pair_coeff      * * coul/wolf

# use harmonic bonds between sites of a molecules
# NOTE: This will not have any effects as we use RATTLE to keep the bonds fixed.
 bond_style        	harmonic              
 angle_style       	harmonic              
 bond_coeff        	1 1000.00 1.000
 angle_coeff       	1 100.0 ${theta}

# use standard correction terms for the truncated tail of the LJ potential
 pair_modify       	tail yes

# NOTE: You need this line only for Ewald summation.
 neigh_modify      	one 7500

# increase the neigbour skin distance 
 neighbor  		4 bin

# set the timestep
 reset_timestep  	0
 timestep               ${dt}



#################################################
# Sampling
#################################################

 variable      		Nsamp    equal 10
 variable      		Nrepeat  equal floor(${Nprod}/${Nsamp})
 variable      		Nevery   equal ${Nsamp}*${Nrepeat}
 
# compute the centre of mass velocity of the box: (vcmx, vcmy, vcmz)
 variable       vcmx        equal "vcm(all,x)"
 variable       vcmy        equal "vcm(all,y)"
 variable       vcmz        equal "vcm(all,z)"
 variable       vcm2        equal v_vcmx*v_vcmx+v_vcmy*v_vcmy+v_vcmz*v_vcmz

# compute temperature, pressure, potential energy, kinetic energy and total energy
 compute         cT  all temp
 compute         cP  all pressure thermo_temp
 compute         cPe all pe
 compute         cKe all ke
 variable        vE  equal c_cKe+c_cPe


# specify the reservoirs
 variable Lz          equal zhi-zlo
 variable delta       equal 8
 variable dz          equal ${Lz}/120
 variable zlo_Thi1    equal zlo
 variable zhi_Thi1    equal ${zlo_Thi1}+${delta}/2.
 variable zlo_Thi2    equal zhi-${delta}/2.
 variable zhi_Thi2    equal zhi
 variable zlo_Tlo     equal -${delta}/2.
 variable zhi_Tlo     equal  ${delta}/2.
 variable xlo         equal xlo
 variable xhi         equal xhi
 variable ylo         equal ylo
 variable yhi         equal yhi

# create regions for the thermostat
# NOTE: You could use the keyword INF for the extents in the x and y directions.
 region         Thi_region1      block ${xlo} ${xhi} ${ylo} ${yhi}      ${zlo_Thi1}    ${zhi_Thi1}
 region         Thi_region2      block ${xlo} ${xhi} ${ylo} ${yhi}      ${zlo_Thi2}    ${zhi_Thi2}
 region         Thi_region       union 2 Thi_region1 Thi_region2
 region         Tlo_region       block ${xlo} ${xhi} ${ylo} ${yhi}      ${zlo_Tlo}     ${zhi_Tlo}


# calculate the (kinetic) temperature from the kinetic energy per atom (kB is Boltzmann's constant)
 variable       kB      equal   0.001987204
 compute        ke      all     ke/atom
 variable       T       atom    c_ke/${kB}

# calculate the spatial variation of the temperature
 fix            fTRhoz  all     ave/spatial  ${Nsamp} ${Nrepeat} ${Nevery}  z lower ${dz} v_T             file  "T.dat" units box

# calculate the spatial variation of the oxygen number density
 fix            fRho    O       ave/spatial  ${Nsamp} ${Nrepeat} ${Nevery}  z lower ${dz} density/number  file  "Rho.dat" units box

# calculate the temperatures of the two reservoirs
# NOTE: The temp/region command assumes 3 degrees of freedom per atom, which is why we rescale the value.
 compute        cThi        all   temp/region Thi_region
 compute        cTlo        all   temp/region Tlo_region
 variable       Thi_act     equal c_cThi/2*3
 variable       Tlo_act     equal c_cTlo/2*3

# thermostat the reservoirs using the eHEX/a algorithm
 fix 		fHi all ehex 1  ${dQdt}   region Thi_region constraints on com on 
 fix 		fLo all ehex 1 -${dQdt}   region Tlo_region constraints on com on 

# dump coordinates of all atoms every 25 timesteps
 dump           dDUMPALL all custom 25 "trj.dat" id x y z
 dump_modify    dDUMPALL sort id

# use NVE integration with the velocity Verlet algorithm
 fix           	fNVE all nve

# use RATTLE with a precision of 1.e-10
 fix            fRattle all rattle 1e-10 400 0 b 1 a 1

# output timestep, temperatures (average, cold reservoir, hot reservoir), energies (kinetic, potential and total),
# pressure and squared com velocity every 100 timesteps
 thermo_style   custom step temp v_Tlo_act v_Thi_act  ke pe etotal press v_vcm2 
 thermo_modify  flush yes
 thermo         100
 run            ${Nprod}

# save final configurations as binary and text files
 write_restart  "final.res"
 write_data     "final.dat"

